function calculateExpectedPoints(player) {
    // Base factors that influence expected points
    const baseFactors = {
        // Playing time probability
        chanceOfPlaying: player.chanceOfPlaying || 100, // as percentage
        averageMinutesPlayed: player.avgMinutes || 90,
        
        // Historical performance
        form: player.form || 0, // average points in last 3 gameweeks
        pointsPerGame: player.pointsPerGame || 0,
        
        // Fixture difficulty
        nextOpponentDifficulty: player.nextFixtureDifficulty || 3, // scale 1-5
        isHomeGame: player.isHomeGame || false,
        
        // Position-specific scoring opportunities
        position: player.position, // GKP, DEF, MID, FWD
        
        // Team strength
        teamStrength: player.teamStrength || 3, // scale 1-5
    };
    
    // Calculate basic expected points
    let expectedPoints = (baseFactors.pointsPerGame * 0.5) + (baseFactors.form * 0.5);
    
    // Adjust for fixture difficulty
    const difficultyModifier = 1 + ((3 - baseFactors.nextOpponentDifficulty) * 0.1);
    expectedPoints *= difficultyModifier;
    
    // Home/Away adjustment
    if (baseFactors.isHomeGame) {
        expectedPoints *= 1.1; // 10% bonus for home games
    }
    
    // Position-specific adjustments
    const positionModifiers = {
        GKP: (points) => {
            // Goalkeepers get bonus for clean sheet potential
            return points * (1 + (baseFactors.teamStrength * 0.05));
        },
        DEF: (points) => {
            // Defenders get bonus for clean sheet potential
            return points * (1 + (baseFactors.teamStrength * 0.04));
        },
        MID: (points) => {
            // Midfielders balanced between attack and defense
            return points * 1.02;
        },
        FWD: (points) => {
            // Forwards get bonus against weaker teams
            return points * (1 + ((5 - baseFactors.nextOpponentDifficulty) * 0.06));
        }
    };
    
    expectedPoints = positionModifiers[baseFactors.position](expectedPoints);
    
    // Playing time probability adjustment
    expectedPoints *= (baseFactors.chanceOfPlaying / 100);
    
    // Minutes played adjustment
    const minutesModifier = Math.min(baseFactors.averageMinutesPlayed / 90, 1);
    expectedPoints *= minutesModifier;
    
    // Round to 1 decimal place
    return Math.round(expectedPoints * 10) / 10;
}

// Example usage
const examplePlayer = {
    chanceOfPlaying: 100,
    avgMinutes: 85,
    form: 6.3,
    pointsPerGame: 5.2,
    nextFixtureDifficulty: 2,
    isHomeGame: true,
    position: 'MID',
    teamStrength: 4
};

const expectedPoints = calculateExpectedPoints(examplePlayer);
console.log(`Expected points: ${expectedPoints}`);